{"version":3,"sources":["assets/images/colour-1885352_1920.jpg","assets/images/Screenshot 2020-06-10 at 16.20.00.png","assets/images/Screenshot 2020-06-09 at 19.00.09.png","assets/images/Screenshot 2020-06-09 at 20.15.33.png","components/ProjectGrid.js","components/DynamicPart.js","components/Dynamic2.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GridWrapper","styled","div","ProjectCard","ProjectGrid","className","target","href","src","require","Slide","Header","isVisible","TransitionGroup","CSSTransition","in","appear","timeout","classNames","key","icon","faGithub","Header2","activeClass","to","spy","smooth","offset","duration","LandingWrapper","images","Landing","useState","setIsVisible","useEffect","timer","setTimeout","clearTimeout","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iD,uDCA3CD,EAAOC,QAAU,IAA0B,+D,mBCA3CD,EAAOC,QAAU,IAA0B,+D,mBCA3CD,EAAOC,QAAU,IAA0B,+D,gqCCG3C,IAAMC,EAAcC,IAAOC,IAAV,KAuBXC,EAAcF,IAAOC,IAAV,IAgBX,IAwDSE,EA9CK,WAClB,OACE,kBAACJ,EAAD,KACE,yBAAKK,UAAU,QACb,kBAACF,EAAD,KACE,kDACA,uBAAGG,OAAO,MAAMC,KAAK,qCACnB,yBACEC,IAAKC,EAAQ,OAGjB,uBAAGJ,UAAU,eAAb,6FAKF,kBAACF,EAAD,KACE,+CACA,uBACEI,KAAK,mDACLD,OAAO,OAEP,yBACEE,IAAKC,EAAQ,OAGjB,uBAAGJ,UAAU,eAAb,uDAIF,kBAACF,EAAD,KACE,oDACA,uBAAGI,KAAK,gCAAgCD,OAAO,OAC7C,yBACEE,IAAKC,EAAQ,OAGjB,uBAAGJ,UAAU,eAAb,mD,saCnFV,IAAMK,EAAQT,IAAOC,IAAV,KA4CIS,EAzBA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAChB,OAAOA,EACL,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,GAAIH,EACJI,QAAQ,EACRC,QAAS,IACTC,WAAW,QACXC,IAAK,QAEL,kBAACT,EAAD,KACE,8CACA,iDAEE,6BACA,uBAAGH,KAAK,+BAA+BD,OAAO,OAC5C,kBAAC,IAAD,CAAiBD,UAAU,OAAOe,KAAMC,WAMhD,M,whBCxCN,IAAMX,EAAQT,IAAOC,IAAV,KAyDIoB,EA/BC,SAAC,GAAmB,IAAjBV,EAAgB,EAAhBA,UACjB,OAAOA,EACL,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,GAAIH,EACJI,QAAQ,EACRC,QAAS,IACTC,WAAW,QACXC,IAAK,QAEL,kBAAC,EAAD,KACE,yBAAKd,UAAU,QACb,4BACE,kBAAC,OAAD,CACEkB,YAAY,SACZC,GAAG,WACHC,KAAK,EACLC,QAAQ,EACRC,QAAS,GACTC,SAAU,KANZ,iBAeR,M,82BCrDN,IAAMC,EAAiB5B,IAAOC,IAAV,IAKqB4B,IASrC,IAkDWC,EA1BC,WAAO,IAAD,EACcC,oBAAS,GADvB,mBACbpB,EADa,KACFqB,EADE,KASpB,OAPAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,GAAa,KACZ,KACH,OAAO,kBAAMI,aAAaF,MACzB,IAGD,oCACE,kBAACN,EAAD,KACE,yBAAKxB,UAAU,UACb,kBAAC,EAAD,CAAQO,UAAWA,KAErB,yBAAKP,UAAU,UACb,kBAAC,EAAD,CAASO,UAAWA,MAGxB,yBAAK0B,GAAG,YACN,kBAAC,EAAD,SC3DOC,MAJf,WACE,OAAO,kBAAC,EAAD,O,MCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e8941f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/colour-1885352_1920.0e1a44a2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2020-06-10 at 16.20.00.fa7a480f.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2020-06-09 at 19.00.09.b75d4ea8.png\";","module.exports = __webpack_public_path__ + \"static/media/Screenshot 2020-06-09 at 20.15.33.5c2df16b.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst GridWrapper = styled.div`\n  background: black;\n  padding-bottom: 2rem;\n  .grid {\n    margin: 0 auto;\n    display: grid;\n    width: 100%;\n    max-width: 1000px;\n    grid-template-columns: 1fr;\n    min-height: 100vh;\n    align-items: center;\n    justify-items: center;\n    @media (min-width: 600px) {\n      grid-gap: 2rem;\n      padding: 2rem;\n      width: 80%;\n      grid-template-columns: 1fr 1fr;\n    }\n    @media (min-width: 1000px) {\n      grid-template-columns: 1fr 1fr 1fr;\n    }\n  }\n`;\nconst ProjectCard = styled.div`\n  border: solid 2px black;\n  @media (max-width: 600px) {\n    min-height: 100vh;\n    border-radius: 0;\n  }\n  height: 400px;\n  max-width: 100%;\n  border-radius: 5px;\n  padding: 2rem;\n  background: rgba(256, 256, 256, 0.9);\n  h4 {\n    margin-top: 0;\n    text-align: center;\n  }\n  img {\n    ${\"\" /* border-radius: 5px; */}\n    max-width: 100%;\n  }\n  p {\n    font-size: 0.85rem;\n    letter-spacing: 1px;\n    line-height: 1.1rem;\n  }\n`;\n\nconst ProjectGrid = () => {\n  return (\n    <GridWrapper>\n      <div className=\"grid\">\n        <ProjectCard>\n          <h4>The Plant Exchange</h4>\n          <a target=\"tab\" href=\"https://the-plant-exchan.web.app/\">\n            <img\n              src={require(\"../assets/images/Screenshot 2020-06-10 at 16.20.00.png\")}\n            ></img>\n          </a>\n          <p className=\"description\">\n            A web app with full CRUD functionality and online storage built\n            using react and firebase\n          </p>\n        </ProjectCard>\n        <ProjectCard>\n          <h4>Pixabay Gallery</h4>\n          <a\n            href=\"https://pixabaygallery.web.app/pixabayApiGallery\"\n            target=\"tab\"\n          >\n            <img\n              src={require(\"../assets/images/Screenshot 2020-06-09 at 19.00.09.png\")}\n            ></img>\n          </a>\n          <p className=\"description\">\n            An interactive gallery built using the pixabay API\n          </p>\n        </ProjectCard>\n        <ProjectCard>\n          <h4>Colour Guessing Game</h4>\n          <a href=\"https://colour-guess.web.app/\" target=\"tab\">\n            <img\n              src={require(\"../assets/images/Screenshot 2020-06-09 at 20.15.33.png\")}\n            ></img>\n          </a>\n          <p className=\"description\">\n            A fun colour guessing game to teach you RGB\n          </p>\n        </ProjectCard>\n      </div>\n    </GridWrapper>\n  );\n};\n\nexport default ProjectGrid;\n","import React from \"react\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nconst Slide = styled.div`\n  &.slide-appear {\n    opacity: 0;\n    z-index: 1;\n  }\n  &.slide-appear.slide-appear-active {\n    opacity: 1;\n    transition: opacity 2000ms linear;\n  }\n  &.slide-enter {\n    opacity: 0;\n    z-index: 1;\n  }\n  &.slide-enter.slide-enter-active {\n    opacity: 1;\n    transition: opacity 2000ms linear;\n  }\n`;\n\nconst Header = ({ isVisible }) => {\n  return isVisible ? (\n    <TransitionGroup>\n      <CSSTransition\n        in={isVisible}\n        appear={true}\n        timeout={2000}\n        classNames=\"slide\"\n        key={\"true\"}\n      >\n        <Slide>\n          <h1>ADAM TARNOWSKI</h1>\n          <p>\n            FRONT-END DEVELOPER\n            <br />\n            <a href=\"https://github.com/Adamovski\" target=\"tab\">\n              <FontAwesomeIcon className=\"icon\" icon={faGithub} />\n            </a>\n          </p>\n        </Slide>\n      </CSSTransition>\n    </TransitionGroup>\n  ) : null;\n};\n\nexport default Header;\n","import React from \"react\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styled from \"styled-components\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { Link, animateScroll as scroll } from \"react-scroll\";\n\nconst Slide = styled.div`\n  &.slide-appear {\n    opacity: 0;\n    z-index: 1;\n  }\n  &.slide-appear.slide-appear-active {\n    opacity: 1;\n    transition: opacity 2000ms linear;\n  }\n  &.slide-enter {\n    opacity: 0;\n    z-index: 1;\n  }\n  &.slide-enter.slide-enter-active {\n    opacity: 1;\n    transition: opacity 2000ms linear;\n  }\n  .link {\n    cursor: pointer;\n    color: white;\n    text-transform: uppercase;\n    grid-column: 1/4;\n    letter-spacing: 2px;\n  }\n`;\n\nconst Header2 = ({ isVisible }) => {\n  return isVisible ? (\n    <TransitionGroup>\n      <CSSTransition\n        in={isVisible}\n        appear={true}\n        timeout={2000}\n        classNames=\"slide\"\n        key={\"true\"}\n      >\n        <Slide>\n          <div className=\"link\">\n            <h2>\n              <Link\n                activeClass=\"active\"\n                to=\"projects\"\n                spy={true}\n                smooth={true}\n                offset={-70}\n                duration={500}\n              >\n                Projects\n              </Link>\n            </h2>\n          </div>\n        </Slide>\n      </CSSTransition>\n    </TransitionGroup>\n  ) : null;\n};\n\nexport default Header2;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport images from \"../assets/images/colour-1885352_1920.jpg\";\nimport ProjectGrid from \"./ProjectGrid\";\n\nimport Header from \"./DynamicPart\";\nimport Header2 from \"./Dynamic2\";\n\nconst LandingWrapper = styled.div`\n  border: solid 2px black;\n  margin: 0;\n  padding: 0;\n  min-height: 100vh;\n  background: rgba(8, 12, 66, 0.3) url(${images}) no-repeat center center;\n  background-blend-mode: darken;\n  -webkit-background-size: cover;\n  -moz-background-size: cover;\n  -o-background-size: cover;\n  background-size: cover;\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  ${\"\" /* grid-template-columns: auto min-max(300px 1fr) auto; */}\n  @media (min-width: 600px) {\n    grid-template-columns: repeat(3, minmax(200px, 1fr));\n  }\n  .header {\n    text-transform: uppercase;\n    color: white;\n    grid-column: 1/4;\n    text-align: center;\n    h1 {\n      margin-top: 0;\n      font-size: 2rem;\n      letter-spacing: 4px;\n    }\n    p {\n      letter-spacing: 2px;\n      line-height: 2rem;\n      .icon {\n        font-size: 1.5rem;\n      }\n    }\n  }\n`;\n\nconst Landing = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsVisible(true);\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <>\n      <LandingWrapper>\n        <div className=\"header\">\n          <Header isVisible={isVisible} />\n        </div>\n        <div className=\"header\">\n          <Header2 isVisible={isVisible} />\n        </div>\n      </LandingWrapper>\n      <div id=\"projects\">\n        <ProjectGrid />\n      </div>\n    </>\n  );\n};\n\nexport default Landing;\n","import React from \"react\";\nimport Landing from \"./components/Landing\";\n\nfunction App() {\n  return <Landing />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}